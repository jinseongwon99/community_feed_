name: on-premise-cicd     #Github Actions 목록에서 보여지는 이름
on:                       #언제 방아쇠를 당겨서 워크플러우를 실행할지 정즤
  workflow_dispatch:
    inputs:
      tags:               #태그로 어떤 버젼인지 확인하기 위해 사용 (v1.0.0)
        description: 'Set Tags Name'
        required: true
        default: main

jobs:
  build:
    runs-on: ubuntu-latest  #가상머신 종류
    outputs:                #리턴 값
      release: ${{ steps.set-version.outputs.VERSION_NAME }}  #버젼 명시
    steps:                   # v1.0.0 -> v1-0-0 으로 변경
      - id: set-version      # github(=on), event(=workflow-dispatch)
        run: |               #입력 태그 값의 마침표(.)를 하이픈(-)으로 변환해 VERSION_NAME 변수로 설정하고, 이를 GITHUB_OUTPUT에 출력
          echo "VERSION_NAME=$(echo "${{ github.event.inputs.tags }}" | sed "s/\./\-/g")" >> $GITHUB_OUTPUT

      - name: Check Version Name
        run: |
          echo "Check Version -> ${{ steps.set-version.outputs.VERSION_NAME }}"

        # 베포할 checkout 소스
        #github marketplace 의 공식 checkout 액션 (actions/액션명@버젼)
        # ㄴ ex) 4.17 버젼일 경우 v4로 작성 가능
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:   #파라미터
          ref: '${{ github.event.inputs.tags }}'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version : 17
          distribution : 'temurin'

        # gradle 빌드
        # 위치: 위에 checkout 으로 현재 프로젝트에 위치 => 현재 위치의 /gradlew 을 실행
      - name: Build with Gradlew
        run: ./gradlew clean test bootJar #clean -> test -> bootJar 순서로 실행

        # 위의 clean -> test -> bootJar 을 실행하면 -> build/libs 하위에 생성된 .jar 파일을 add
      - name: Add version
        run: |
          mv build/libs/community_feed-1.0-SNAPSHOT.jar build/libs/cicd-community_feed-${{ steps.set-version.outputs.VERSION_NAME }}.jar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cicd-community_feed-application #cicd-community_feed-application.zip 파일로 ci runner 공간에 저장
          path: build/libs/cicd-community_feed-${{ steps.set-version.outputs.VERSION_NAME }}.jar

  # 실행할 가상머신 종류
  deploy:
    runs-on: ubuntu-latest
    needs:  # 필드 작업이 끝나면 실행
      - build

    steps:
      - name: Download Artifact
        uses: actions/download-artifact
        with:
          name: cicd-community_feed-application # build 한 아키텍처 파일 : cicd-community_feed-application.zip
          path: build/libs/

      # EC2에 배포
      # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
      # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
      # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행!!
      ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
            chmod 600 private_key.pem
            scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/cicd-community_feed-${{ needs.build.outputs.release }}.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/cicd-community_feed-${{ needs.build.outputs.release }}.jar
            ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USERNAME }}/cicd-community_feed-${{ needs.build.outputs.release }}.jar > app.log 2>&1 &"
            rm -f private_key.pem 
